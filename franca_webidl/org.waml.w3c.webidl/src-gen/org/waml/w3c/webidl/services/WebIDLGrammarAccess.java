/*
* generated by Xtext
*/

package org.waml.w3c.webidl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class WebIDLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class IDLDefinitionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IDLDefinitions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cDefinitionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefinitionsAbstractDefinitionsParserRuleCall_1_0 = (RuleCall)cDefinitionsAssignment_1.eContents().get(0);
		
		//IDLDefinitions:
		//	imports+=Import* definitions+=AbstractDefinitions*;
		public ParserRule getRule() { return rule; }

		//imports+=Import* definitions+=AbstractDefinitions*
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//definitions+=AbstractDefinitions*
		public Assignment getDefinitionsAssignment_1() { return cDefinitionsAssignment_1; }

		//AbstractDefinitions
		public RuleCall getDefinitionsAbstractDefinitionsParserRuleCall_1_0() { return cDefinitionsAbstractDefinitionsParserRuleCall_1_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Import:
		//	"import" importURI=STRING ";";
		public ParserRule getRule() { return rule; }

		//"import" importURI=STRING ";"
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class TypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypedefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeRefParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// Common and type declaration definitions
		//
		//TypeDef:
		//	"typedef" type=TypeRef name=ID ";";
		public ParserRule getRule() { return rule; }

		//"typedef" type=TypeRef name=ID ";"
		public Group getGroup() { return cGroup; }

		//"typedef"
		public Keyword getTypedefKeyword_0() { return cTypedefKeyword_0; }

		//type=TypeRef
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_1_0() { return cTypeTypeRefParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class TypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitiveTypeRefParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cIsArrayAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cIsArrayLeftSquareBracketRightSquareBracketKeyword_0_1_0 = (Keyword)cIsArrayAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cSequenceTypeParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cIsArrayAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cIsArrayLeftSquareBracketRightSquareBracketKeyword_1_1_0 = (Keyword)cIsArrayAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cUserTypeRefParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cIsArrayAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cIsArrayLeftSquareBracketRightSquareBracketKeyword_2_1_0 = (Keyword)cIsArrayAssignment_2_1.eContents().get(0);
		
		//TypeRef:
		//	PrimitiveTypeRef isArray?="[]"? | SequenceType isArray?="[]"? | UserTypeRef isArray?="[]"?;
		public ParserRule getRule() { return rule; }

		//PrimitiveTypeRef isArray?="[]"? | SequenceType isArray?="[]"? | UserTypeRef isArray?="[]"?
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrimitiveTypeRef isArray?="[]"?
		public Group getGroup_0() { return cGroup_0; }

		//PrimitiveTypeRef
		public RuleCall getPrimitiveTypeRefParserRuleCall_0_0() { return cPrimitiveTypeRefParserRuleCall_0_0; }

		//isArray?="[]"?
		public Assignment getIsArrayAssignment_0_1() { return cIsArrayAssignment_0_1; }

		//"[]"
		public Keyword getIsArrayLeftSquareBracketRightSquareBracketKeyword_0_1_0() { return cIsArrayLeftSquareBracketRightSquareBracketKeyword_0_1_0; }

		//SequenceType isArray?="[]"?
		public Group getGroup_1() { return cGroup_1; }

		//SequenceType
		public RuleCall getSequenceTypeParserRuleCall_1_0() { return cSequenceTypeParserRuleCall_1_0; }

		//isArray?="[]"?
		public Assignment getIsArrayAssignment_1_1() { return cIsArrayAssignment_1_1; }

		//"[]"
		public Keyword getIsArrayLeftSquareBracketRightSquareBracketKeyword_1_1_0() { return cIsArrayLeftSquareBracketRightSquareBracketKeyword_1_1_0; }

		//UserTypeRef isArray?="[]"?
		public Group getGroup_2() { return cGroup_2; }

		//UserTypeRef
		public RuleCall getUserTypeRefParserRuleCall_2_0() { return cUserTypeRefParserRuleCall_2_0; }

		//isArray?="[]"?
		public Assignment getIsArrayAssignment_2_1() { return cIsArrayAssignment_2_1; }

		//"[]"
		public Keyword getIsArrayLeftSquareBracketRightSquareBracketKeyword_2_1_0() { return cIsArrayLeftSquareBracketRightSquareBracketKeyword_2_1_0; }
	}

	public class UserTypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UserTypeRef");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTypeTypesCrossReference_0 = (CrossReference)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeTypesScopedNameParserRuleCall_0_1 = (RuleCall)cTypeTypesCrossReference_0.eContents().get(1);
		
		//UserTypeRef:
		//	type=[Types|ScopedName];
		public ParserRule getRule() { return rule; }

		//type=[Types|ScopedName]
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//[Types|ScopedName]
		public CrossReference getTypeTypesCrossReference_0() { return cTypeTypesCrossReference_0; }

		//ScopedName
		public RuleCall getTypeTypesScopedNameParserRuleCall_0_1() { return cTypeTypesScopedNameParserRuleCall_0_1; }
	}

	public class TypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Types");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInterfaceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInterfaceFeatureParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Types:
		//	TypeDef | Interface | InterfaceFeature;
		public ParserRule getRule() { return rule; }

		//TypeDef | Interface | InterfaceFeature
		public Alternatives getAlternatives() { return cAlternatives; }

		//TypeDef
		public RuleCall getTypeDefParserRuleCall_0() { return cTypeDefParserRuleCall_0; }

		//Interface
		public RuleCall getInterfaceParserRuleCall_1() { return cInterfaceParserRuleCall_1; }

		//InterfaceFeature
		public RuleCall getInterfaceFeatureParserRuleCall_2() { return cInterfaceFeatureParserRuleCall_2; }
	}

	public class PrimitiveTypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveTypeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUnsignedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cUnsignedUnsignedKeyword_0_0 = (Keyword)cUnsignedAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final Keyword cNameVoidKeyword_1_0_0 = (Keyword)cNameAlternatives_1_0.eContents().get(0);
		private final Keyword cNameBooleanKeyword_1_0_1 = (Keyword)cNameAlternatives_1_0.eContents().get(1);
		private final Keyword cNameByteKeyword_1_0_2 = (Keyword)cNameAlternatives_1_0.eContents().get(2);
		private final Keyword cNameDoubleKeyword_1_0_3 = (Keyword)cNameAlternatives_1_0.eContents().get(3);
		private final Keyword cNameFloatKeyword_1_0_4 = (Keyword)cNameAlternatives_1_0.eContents().get(4);
		private final Keyword cNameShortKeyword_1_0_5 = (Keyword)cNameAlternatives_1_0.eContents().get(5);
		private final Keyword cNameLongKeyword_1_0_6 = (Keyword)cNameAlternatives_1_0.eContents().get(6);
		private final Keyword cNameObjectKeyword_1_0_7 = (Keyword)cNameAlternatives_1_0.eContents().get(7);
		private final Keyword cNameObjectKeyword_1_0_8 = (Keyword)cNameAlternatives_1_0.eContents().get(8);
		private final Keyword cNameAnyKeyword_1_0_9 = (Keyword)cNameAlternatives_1_0.eContents().get(9);
		private final Keyword cNameOctetKeyword_1_0_10 = (Keyword)cNameAlternatives_1_0.eContents().get(10);
		private final Keyword cNameDOMStringKeyword_1_0_11 = (Keyword)cNameAlternatives_1_0.eContents().get(11);
		private final Assignment cNullableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNullableQuestionMarkKeyword_2_0 = (Keyword)cNullableAssignment_2.eContents().get(0);
		
		//PrimitiveTypeRef:
		//	unsigned?="unsigned"? name=("void" | "boolean" | "byte" | "double" | "float" | "short" | "long" | "Object" | "object"
		//	| "any" | "octet" | "DOMString")+ nullable?="?"?;
		public ParserRule getRule() { return rule; }

		//unsigned?="unsigned"? name=("void" | "boolean" | "byte" | "double" | "float" | "short" | "long" | "Object" | "object" |
		//"any" | "octet" | "DOMString")+ nullable?="?"?
		public Group getGroup() { return cGroup; }

		//unsigned?="unsigned"?
		public Assignment getUnsignedAssignment_0() { return cUnsignedAssignment_0; }

		//"unsigned"
		public Keyword getUnsignedUnsignedKeyword_0_0() { return cUnsignedUnsignedKeyword_0_0; }

		//name=("void" | "boolean" | "byte" | "double" | "float" | "short" | "long" | "Object" | "object" | "any" | "octet" |
		//"DOMString")+
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//"void" | "boolean" | "byte" | "double" | "float" | "short" | "long" | "Object" | "object" | "any" | "octet" |
		//"DOMString"
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }

		//"void"
		public Keyword getNameVoidKeyword_1_0_0() { return cNameVoidKeyword_1_0_0; }

		//"boolean"
		public Keyword getNameBooleanKeyword_1_0_1() { return cNameBooleanKeyword_1_0_1; }

		//"byte"
		public Keyword getNameByteKeyword_1_0_2() { return cNameByteKeyword_1_0_2; }

		//"double"
		public Keyword getNameDoubleKeyword_1_0_3() { return cNameDoubleKeyword_1_0_3; }

		//"float"
		public Keyword getNameFloatKeyword_1_0_4() { return cNameFloatKeyword_1_0_4; }

		//"short"
		public Keyword getNameShortKeyword_1_0_5() { return cNameShortKeyword_1_0_5; }

		//"long"
		public Keyword getNameLongKeyword_1_0_6() { return cNameLongKeyword_1_0_6; }

		//"Object"
		public Keyword getNameObjectKeyword_1_0_7() { return cNameObjectKeyword_1_0_7; }

		//"object"
		public Keyword getNameObjectKeyword_1_0_8() { return cNameObjectKeyword_1_0_8; }

		//"any"
		public Keyword getNameAnyKeyword_1_0_9() { return cNameAnyKeyword_1_0_9; }

		//"octet"
		public Keyword getNameOctetKeyword_1_0_10() { return cNameOctetKeyword_1_0_10; }

		//"DOMString"
		public Keyword getNameDOMStringKeyword_1_0_11() { return cNameDOMStringKeyword_1_0_11; }

		//nullable?="?"?
		public Assignment getNullableAssignment_2() { return cNullableAssignment_2; }

		//"?"
		public Keyword getNullableQuestionMarkKeyword_2_0() { return cNullableQuestionMarkKeyword_2_0; }
	}

	public class SequenceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SequenceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSequenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeRefParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNullableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cNullableQuestionMarkKeyword_3_0 = (Keyword)cNullableAssignment_3.eContents().get(0);
		
		//SequenceType:
		//	"sequence<" type=TypeRef ">" nullable?="?"?;
		public ParserRule getRule() { return rule; }

		//"sequence<" type=TypeRef ">" nullable?="?"?
		public Group getGroup() { return cGroup; }

		//"sequence<"
		public Keyword getSequenceKeyword_0() { return cSequenceKeyword_0; }

		//type=TypeRef
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_1_0() { return cTypeTypeRefParserRuleCall_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }

		//nullable?="?"?
		public Assignment getNullableAssignment_3() { return cNullableAssignment_3; }

		//"?"
		public Keyword getNullableQuestionMarkKeyword_3_0() { return cNullableQuestionMarkKeyword_3_0; }
	}

	public class ScopedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScopedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//ScopedName:
		//	ID ("::" ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("::" ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("::" ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"::"
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class CallableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Callable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCallableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetOperationCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetOperationScopedNameParserRuleCall_1_0_1 = (RuleCall)cTargetOperationCrossReference_1_0.eContents().get(1);
		
		//// Extended Attributes 
		//
		//Callable:
		//	"Callable" target=[Operation|ScopedName];
		public ParserRule getRule() { return rule; }

		//"Callable" target=[Operation|ScopedName]
		public Group getGroup() { return cGroup; }

		//"Callable"
		public Keyword getCallableKeyword_0() { return cCallableKeyword_0; }

		//target=[Operation|ScopedName]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }

		//[Operation|ScopedName]
		public CrossReference getTargetOperationCrossReference_1_0() { return cTargetOperationCrossReference_1_0; }

		//ScopedName
		public RuleCall getTargetOperationScopedNameParserRuleCall_1_0_1() { return cTargetOperationScopedNameParserRuleCall_1_0_1; }
	}

	public class ConstructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constructor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstructorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cConstructorAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArgumentsArgumentParserRuleCall_2_1_0 = (RuleCall)cArgumentsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cArgumentsArgumentParserRuleCall_2_2_1_0 = (RuleCall)cArgumentsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//Constructor:
		//	"Constructor" {Constructor} ("(" arguments+=Argument ("," arguments+=Argument)* ")")?;
		public ParserRule getRule() { return rule; }

		//"Constructor" {Constructor} ("(" arguments+=Argument ("," arguments+=Argument)* ")")?
		public Group getGroup() { return cGroup; }

		//"Constructor"
		public Keyword getConstructorKeyword_0() { return cConstructorKeyword_0; }

		//{Constructor}
		public Action getConstructorAction_1() { return cConstructorAction_1; }

		//("(" arguments+=Argument ("," arguments+=Argument)* ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//arguments+=Argument
		public Assignment getArgumentsAssignment_2_1() { return cArgumentsAssignment_2_1; }

		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_2_1_0() { return cArgumentsArgumentParserRuleCall_2_1_0; }

		//("," arguments+=Argument)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//arguments+=Argument
		public Assignment getArgumentsAssignment_2_2_1() { return cArgumentsAssignment_2_2_1; }

		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_2_2_1_0() { return cArgumentsArgumentParserRuleCall_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}

	public class NamedConstructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedConstructor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNamedConstructorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cConstructorAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cArgumentsAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cArgumentsArgumentParserRuleCall_4_1_0_0 = (RuleCall)cArgumentsAssignment_4_1_0.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cGroup_4_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_1_0 = (Keyword)cGroup_4_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_4_1_1_1 = (Assignment)cGroup_4_1_1.eContents().get(1);
		private final RuleCall cArgumentsArgumentParserRuleCall_4_1_1_1_0 = (RuleCall)cArgumentsAssignment_4_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//NamedConstructor:
		//	"NamedConstructor" {Constructor} "=" name=ID ("(" (arguments+=Argument ("," arguments+=Argument)*)? ")")?;
		public ParserRule getRule() { return rule; }

		//"NamedConstructor" {Constructor} "=" name=ID ("(" (arguments+=Argument ("," arguments+=Argument)*)? ")")?
		public Group getGroup() { return cGroup; }

		//"NamedConstructor"
		public Keyword getNamedConstructorKeyword_0() { return cNamedConstructorKeyword_0; }

		//{Constructor}
		public Action getConstructorAction_1() { return cConstructorAction_1; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//("(" (arguments+=Argument ("," arguments+=Argument)*)? ")")?
		public Group getGroup_4() { return cGroup_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }

		//(arguments+=Argument ("," arguments+=Argument)*)?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//arguments+=Argument
		public Assignment getArgumentsAssignment_4_1_0() { return cArgumentsAssignment_4_1_0; }

		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_4_1_0_0() { return cArgumentsArgumentParserRuleCall_4_1_0_0; }

		//("," arguments+=Argument)*
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }

		//","
		public Keyword getCommaKeyword_4_1_1_0() { return cCommaKeyword_4_1_1_0; }

		//arguments+=Argument
		public Assignment getArgumentsAssignment_4_1_1_1() { return cArgumentsAssignment_4_1_1_1; }

		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_4_1_1_1_0() { return cArgumentsArgumentParserRuleCall_4_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
	}

	public class CallbackElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Callback");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCallbackKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Action cCallbackAction_0_1 = (Action)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cCallbackKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cFunctionOnlyAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Keyword cFunctionOnlyFunctionOnlyKeyword_1_2_0 = (Keyword)cFunctionOnlyAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cCallbackKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cPropertyOnlyAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final Keyword cPropertyOnlyPropertyOnlyKeyword_2_2_0 = (Keyword)cPropertyOnlyAssignment_2_2.eContents().get(0);
		
		//Callback:
		//	"Callback" {Callback} | "Callback" "=" functionOnly?="FunctionOnly" | "Callback" "=" propertyOnly?="PropertyOnly";
		public ParserRule getRule() { return rule; }

		//"Callback" {Callback} | "Callback" "=" functionOnly?="FunctionOnly" | "Callback" "=" propertyOnly?="PropertyOnly"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"Callback" {Callback}
		public Group getGroup_0() { return cGroup_0; }

		//"Callback"
		public Keyword getCallbackKeyword_0_0() { return cCallbackKeyword_0_0; }

		//{Callback}
		public Action getCallbackAction_0_1() { return cCallbackAction_0_1; }

		//"Callback" "=" functionOnly?="FunctionOnly"
		public Group getGroup_1() { return cGroup_1; }

		//"Callback"
		public Keyword getCallbackKeyword_1_0() { return cCallbackKeyword_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }

		//functionOnly?="FunctionOnly"
		public Assignment getFunctionOnlyAssignment_1_2() { return cFunctionOnlyAssignment_1_2; }

		//"FunctionOnly"
		public Keyword getFunctionOnlyFunctionOnlyKeyword_1_2_0() { return cFunctionOnlyFunctionOnlyKeyword_1_2_0; }

		//"Callback" "=" propertyOnly?="PropertyOnly"
		public Group getGroup_2() { return cGroup_2; }

		//"Callback"
		public Keyword getCallbackKeyword_2_0() { return cCallbackKeyword_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }

		//propertyOnly?="PropertyOnly"
		public Assignment getPropertyOnlyAssignment_2_2() { return cPropertyOnlyAssignment_2_2; }

		//"PropertyOnly"
		public Keyword getPropertyOnlyPropertyOnlyKeyword_2_2_0() { return cPropertyOnlyPropertyOnlyKeyword_2_2_0; }
	}

	public class NoInterfaceObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NoInterfaceObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNoInterfaceObjectAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNoInterfaceObjectKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NoInterfaceObject:
		//	{NoInterfaceObject} "NoInterfaceObject";
		public ParserRule getRule() { return rule; }

		//{NoInterfaceObject} "NoInterfaceObject"
		public Group getGroup() { return cGroup; }

		//{NoInterfaceObject}
		public Action getNoInterfaceObjectAction_0() { return cNoInterfaceObjectAction_0; }

		//"NoInterfaceObject"
		public Keyword getNoInterfaceObjectKeyword_1() { return cNoInterfaceObjectKeyword_1; }
	}

	public class OverrideBuiltinsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OverrideBuiltins");
		private final Keyword cOverrideBuiltinsKeyword = (Keyword)rule.eContents().get(1);
		
		//OverrideBuiltins:
		//	"OverrideBuiltins";
		public ParserRule getRule() { return rule; }

		//"OverrideBuiltins"
		public Keyword getOverrideBuiltinsKeyword() { return cOverrideBuiltinsKeyword; }
	}

	public class PrototypeRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrototypeRoot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrototypeRootAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPrototypeRootKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PrototypeRoot:
		//	{PrototypeRoot} "PrototypeRoot";
		public ParserRule getRule() { return rule; }

		//{PrototypeRoot} "PrototypeRoot"
		public Group getGroup() { return cGroup; }

		//{PrototypeRoot}
		public Action getPrototypeRootAction_0() { return cPrototypeRootAction_0; }

		//"PrototypeRoot"
		public Keyword getPrototypeRootKeyword_1() { return cPrototypeRootKeyword_1; }
	}

	public class PutForwardsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PutForwards");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPutForwardsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTargetAttributeCrossReference_2_0 = (CrossReference)cTargetAssignment_2.eContents().get(0);
		private final RuleCall cTargetAttributeIDTerminalRuleCall_2_0_1 = (RuleCall)cTargetAttributeCrossReference_2_0.eContents().get(1);
		
		//PutForwards:
		//	"PutForwards" "=" target=[Attribute];
		public ParserRule getRule() { return rule; }

		//"PutForwards" "=" target=[Attribute]
		public Group getGroup() { return cGroup; }

		//"PutForwards"
		public Keyword getPutForwardsKeyword_0() { return cPutForwardsKeyword_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//target=[Attribute]
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }

		//[Attribute]
		public CrossReference getTargetAttributeCrossReference_2_0() { return cTargetAttributeCrossReference_2_0; }

		//ID
		public RuleCall getTargetAttributeIDTerminalRuleCall_2_0_1() { return cTargetAttributeIDTerminalRuleCall_2_0_1; }
	}

	public class TreatNullAsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TreatNullAs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTreatNullAsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTreatNullAsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEmptyStringKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TreatNullAs:
		//	{TreatNullAs} "TreatNullAs" "=" "EmptyString";
		public ParserRule getRule() { return rule; }

		//{TreatNullAs} "TreatNullAs" "=" "EmptyString"
		public Group getGroup() { return cGroup; }

		//{TreatNullAs}
		public Action getTreatNullAsAction_0() { return cTreatNullAsAction_0; }

		//"TreatNullAs"
		public Keyword getTreatNullAsKeyword_1() { return cTreatNullAsKeyword_1; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//"EmptyString"
		public Keyword getEmptyStringKeyword_3() { return cEmptyStringKeyword_3; }
	}

	public class TreatUndefinedAsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TreatUndefinedAs");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cTreatUndefinedAsAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cTreatUndefinedAsKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cAsEmptyStringAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final Keyword cAsEmptyStringEmptyStringKeyword_0_3_0 = (Keyword)cAsEmptyStringAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cTreatUndefinedAsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cTreatUndefinedAsKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cAsNullAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final Keyword cAsNullNullKeyword_1_3_0 = (Keyword)cAsNullAssignment_1_3.eContents().get(0);
		
		//TreatUndefinedAs:
		//	{TreatUndefinedAs} "TreatUndefinedAs" "=" asEmptyString?="EmptyString" | {TreatUndefinedAs} "TreatUndefinedAs" "="
		//	asNull?="null";
		public ParserRule getRule() { return rule; }

		//{TreatUndefinedAs} "TreatUndefinedAs" "=" asEmptyString?="EmptyString" | {TreatUndefinedAs} "TreatUndefinedAs" "="
		//asNull?="null"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{TreatUndefinedAs} "TreatUndefinedAs" "=" asEmptyString?="EmptyString"
		public Group getGroup_0() { return cGroup_0; }

		//{TreatUndefinedAs}
		public Action getTreatUndefinedAsAction_0_0() { return cTreatUndefinedAsAction_0_0; }

		//"TreatUndefinedAs"
		public Keyword getTreatUndefinedAsKeyword_0_1() { return cTreatUndefinedAsKeyword_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_0_2() { return cEqualsSignKeyword_0_2; }

		//asEmptyString?="EmptyString"
		public Assignment getAsEmptyStringAssignment_0_3() { return cAsEmptyStringAssignment_0_3; }

		//"EmptyString"
		public Keyword getAsEmptyStringEmptyStringKeyword_0_3_0() { return cAsEmptyStringEmptyStringKeyword_0_3_0; }

		//{TreatUndefinedAs} "TreatUndefinedAs" "=" asNull?="null"
		public Group getGroup_1() { return cGroup_1; }

		//{TreatUndefinedAs}
		public Action getTreatUndefinedAsAction_1_0() { return cTreatUndefinedAsAction_1_0; }

		//"TreatUndefinedAs"
		public Keyword getTreatUndefinedAsKeyword_1_1() { return cTreatUndefinedAsKeyword_1_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }

		//asNull?="null"
		public Assignment getAsNullAssignment_1_3() { return cAsNullAssignment_1_3; }

		//"null"
		public Keyword getAsNullNullKeyword_1_3_0() { return cAsNullNullKeyword_1_3_0; }
	}

	public class AllowAnyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AllowAny");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAllowAnyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAllowAnyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//AllowAny:
		//	{AllowAny} "AllowAny";
		public ParserRule getRule() { return rule; }

		//{AllowAny} "AllowAny"
		public Group getGroup() { return cGroup; }

		//{AllowAny}
		public Action getAllowAnyAction_0() { return cAllowAnyAction_0; }

		//"AllowAny"
		public Keyword getAllowAnyKeyword_1() { return cAllowAnyKeyword_1; }
	}

	public class ReplaceableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Replaceable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReplaceableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReplaceableKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Replaceable:
		//	{Replaceable} "Replaceable";
		public ParserRule getRule() { return rule; }

		//{Replaceable} "Replaceable"
		public Group getGroup() { return cGroup; }

		//{Replaceable}
		public Action getReplaceableAction_0() { return cReplaceableAction_0; }

		//"Replaceable"
		public Keyword getReplaceableKeyword_1() { return cReplaceableKeyword_1; }
	}

	public class SupplementalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Supplemental");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSupplementalAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSupplementalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Supplemental:
		//	{Supplemental} "Supplemental";
		public ParserRule getRule() { return rule; }

		//{Supplemental} "Supplemental"
		public Group getGroup() { return cGroup; }

		//{Supplemental}
		public Action getSupplementalAction_0() { return cSupplementalAction_0; }

		//"Supplemental"
		public Keyword getSupplementalKeyword_1() { return cSupplementalKeyword_1; }
	}

	public class ReplaceableNamedPropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReplaceableNamedProperties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReplaceableNamedPropertiesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReplaceableNamedPropertiesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ReplaceableNamedProperties:
		//	{ReplaceableNamedProperties} "ReplaceableNamedProperties";
		public ParserRule getRule() { return rule; }

		//{ReplaceableNamedProperties} "ReplaceableNamedProperties"
		public Group getGroup() { return cGroup; }

		//{ReplaceableNamedProperties}
		public Action getReplaceableNamedPropertiesAction_0() { return cReplaceableNamedPropertiesAction_0; }

		//"ReplaceableNamedProperties"
		public Keyword getReplaceableNamedPropertiesKeyword_1() { return cReplaceableNamedPropertiesKeyword_1; }
	}

	public class AbstractDefinitionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractDefinitions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefinitionsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cModuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractDefinitions:
		//	Definitions | Module;
		public ParserRule getRule() { return rule; }

		//Definitions | Module
		public Alternatives getAlternatives() { return cAlternatives; }

		//Definitions
		public RuleCall getDefinitionsParserRuleCall_0() { return cDefinitionsParserRuleCall_0; }

		//Module
		public RuleCall getModuleParserRuleCall_1() { return cModuleParserRuleCall_1; }
	}

	public class DefinitionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Definitions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInterfaceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExceptionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTypeDefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cImplementStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		////TODO: ValueTypeDef is not part of webidl spec
		//
		//Definitions:
		//	Interface | Exception | TypeDef | ImplementStatement;
		public ParserRule getRule() { return rule; }

		//Interface | Exception | TypeDef | ImplementStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//Interface
		public RuleCall getInterfaceParserRuleCall_0() { return cInterfaceParserRuleCall_0; }

		//Exception
		public RuleCall getExceptionParserRuleCall_1() { return cExceptionParserRuleCall_1; }

		//TypeDef
		public RuleCall getTypeDefParserRuleCall_2() { return cTypeDefParserRuleCall_2; }

		//ImplementStatement
		public RuleCall getImplementStatementParserRuleCall_3() { return cImplementStatementParserRuleCall_3; }
	}

	public class ImplementStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImplementStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceInterfaceCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceInterfaceScopedNameParserRuleCall_0_0_1 = (RuleCall)cSourceInterfaceCrossReference_0_0.eContents().get(1);
		private final Keyword cImplementsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTargetInterfaceCrossReference_2_0 = (CrossReference)cTargetAssignment_2.eContents().get(0);
		private final RuleCall cTargetInterfaceScopedNameParserRuleCall_2_0_1 = (RuleCall)cTargetInterfaceCrossReference_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ImplementStatement:
		//	source=[Interface|ScopedName] "implements" target=[Interface|ScopedName] ";";
		public ParserRule getRule() { return rule; }

		//source=[Interface|ScopedName] "implements" target=[Interface|ScopedName] ";"
		public Group getGroup() { return cGroup; }

		//source=[Interface|ScopedName]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }

		//[Interface|ScopedName]
		public CrossReference getSourceInterfaceCrossReference_0_0() { return cSourceInterfaceCrossReference_0_0; }

		//ScopedName
		public RuleCall getSourceInterfaceScopedNameParserRuleCall_0_0_1() { return cSourceInterfaceScopedNameParserRuleCall_0_0_1; }

		//"implements"
		public Keyword getImplementsKeyword_1() { return cImplementsKeyword_1; }

		//target=[Interface|ScopedName]
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }

		//[Interface|ScopedName]
		public CrossReference getTargetInterfaceCrossReference_2_0() { return cTargetInterfaceCrossReference_2_0; }

		//ScopedName
		public RuleCall getTargetInterfaceScopedNameParserRuleCall_2_0_1() { return cTargetInterfaceScopedNameParserRuleCall_2_0_1; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cExtendedAttributesAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExtendedAttributesModuleExtendedAttributeParserRuleCall_0_1_0 = (RuleCall)cExtendedAttributesAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cExtendedAttributesAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cExtendedAttributesModuleExtendedAttributeParserRuleCall_0_2_1_0 = (RuleCall)cExtendedAttributesAssignment_0_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Keyword cModuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameScopedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDefinitionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDefinitionsAbstractDefinitionsParserRuleCall_4_0 = (RuleCall)cDefinitionsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// Module rules
		//
		//Module:
		//	("[" extendedAttributes+=ModuleExtendedAttribute ("," extendedAttributes+=ModuleExtendedAttribute)* "]")? "module"
		//	name=ScopedName "{" definitions+=AbstractDefinitions+ "}" ";";
		public ParserRule getRule() { return rule; }

		//("[" extendedAttributes+=ModuleExtendedAttribute ("," extendedAttributes+=ModuleExtendedAttribute)* "]")? "module"
		//name=ScopedName "{" definitions+=AbstractDefinitions+ "}" ";"
		public Group getGroup() { return cGroup; }

		//("[" extendedAttributes+=ModuleExtendedAttribute ("," extendedAttributes+=ModuleExtendedAttribute)* "]")?
		public Group getGroup_0() { return cGroup_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }

		//extendedAttributes+=ModuleExtendedAttribute
		public Assignment getExtendedAttributesAssignment_0_1() { return cExtendedAttributesAssignment_0_1; }

		//ModuleExtendedAttribute
		public RuleCall getExtendedAttributesModuleExtendedAttributeParserRuleCall_0_1_0() { return cExtendedAttributesModuleExtendedAttributeParserRuleCall_0_1_0; }

		//("," extendedAttributes+=ModuleExtendedAttribute)*
		public Group getGroup_0_2() { return cGroup_0_2; }

		//","
		public Keyword getCommaKeyword_0_2_0() { return cCommaKeyword_0_2_0; }

		//extendedAttributes+=ModuleExtendedAttribute
		public Assignment getExtendedAttributesAssignment_0_2_1() { return cExtendedAttributesAssignment_0_2_1; }

		//ModuleExtendedAttribute
		public RuleCall getExtendedAttributesModuleExtendedAttributeParserRuleCall_0_2_1_0() { return cExtendedAttributesModuleExtendedAttributeParserRuleCall_0_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_0_3() { return cRightSquareBracketKeyword_0_3; }

		//"module"
		public Keyword getModuleKeyword_1() { return cModuleKeyword_1; }

		//name=ScopedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ScopedName
		public RuleCall getNameScopedNameParserRuleCall_2_0() { return cNameScopedNameParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//definitions+=AbstractDefinitions+
		public Assignment getDefinitionsAssignment_4() { return cDefinitionsAssignment_4; }

		//AbstractDefinitions
		public RuleCall getDefinitionsAbstractDefinitionsParserRuleCall_4_0() { return cDefinitionsAbstractDefinitionsParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class ModuleExtendedAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModuleExtendedAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrefixParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNamespaceObjectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ModuleExtendedAttribute:
		//	Prefix | NamespaceObject;
		public ParserRule getRule() { return rule; }

		//Prefix | NamespaceObject
		public Alternatives getAlternatives() { return cAlternatives; }

		//Prefix
		public RuleCall getPrefixParserRuleCall_0() { return cPrefixParserRuleCall_0; }

		//NamespaceObject
		public RuleCall getNamespaceObjectParserRuleCall_1() { return cNamespaceObjectParserRuleCall_1; }
	}

	public class PrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Prefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrefixKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueScopedNameParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Prefix:
		//	"Prefix" "=" value+=ScopedName;
		public ParserRule getRule() { return rule; }

		//"Prefix" "=" value+=ScopedName
		public Group getGroup() { return cGroup; }

		//"Prefix"
		public Keyword getPrefixKeyword_0() { return cPrefixKeyword_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value+=ScopedName
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//ScopedName
		public RuleCall getValueScopedNameParserRuleCall_2_0() { return cValueScopedNameParserRuleCall_2_0; }
	}

	public class NamespaceObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamespaceObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNamespaceObjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cNamespaceObjectAction_1 = (Action)cGroup.eContents().get(1);
		
		//NamespaceObject:
		//	"NamespaceObject" {NamespaceObject};
		public ParserRule getRule() { return rule; }

		//"NamespaceObject" {NamespaceObject}
		public Group getGroup() { return cGroup; }

		//"NamespaceObject"
		public Keyword getNamespaceObjectKeyword_0() { return cNamespaceObjectKeyword_0; }

		//{NamespaceObject}
		public Action getNamespaceObjectAction_1() { return cNamespaceObjectAction_1; }
	}

	public class InterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cExtendedAttributesAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExtendedAttributesInterfaceExtendedAttributeParserRuleCall_0_1_0 = (RuleCall)cExtendedAttributesAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cExtendedAttributeAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cExtendedAttributeInterfaceExtendedAttributeParserRuleCall_0_2_1_0 = (RuleCall)cExtendedAttributeAssignment_0_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Keyword cInterfaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Keyword cColonKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cSuperTypeAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final CrossReference cSuperTypeInterfaceCrossReference_3_0_1_0 = (CrossReference)cSuperTypeAssignment_3_0_1.eContents().get(0);
		private final RuleCall cSuperTypeInterfaceScopedNameParserRuleCall_3_0_1_0_1 = (RuleCall)cSuperTypeInterfaceCrossReference_3_0_1_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cSuperTypeAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cSuperTypeInterfaceCrossReference_3_1_1_0 = (CrossReference)cSuperTypeAssignment_3_1_1.eContents().get(0);
		private final RuleCall cSuperTypeInterfaceScopedNameParserRuleCall_3_1_1_0_1 = (RuleCall)cSuperTypeInterfaceCrossReference_3_1_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMembersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMembersInterfaceMemberParserRuleCall_4_1_0 = (RuleCall)cMembersAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// Interface rules
		//
		//Interface:
		//	("[" extendedAttributes+=InterfaceExtendedAttribute ("," extendedAttribute+=InterfaceExtendedAttribute)* "]")?
		//	"interface" name=ID ((":" superType+=[Interface|ScopedName]) ("," superType+=[Interface|ScopedName])*)? ("{"
		//	members+=InterfaceMember* "}")? ";";
		public ParserRule getRule() { return rule; }

		//("[" extendedAttributes+=InterfaceExtendedAttribute ("," extendedAttribute+=InterfaceExtendedAttribute)* "]")?
		//"interface" name=ID ((":" superType+=[Interface|ScopedName]) ("," superType+=[Interface|ScopedName])*)? ("{"
		//members+=InterfaceMember* "}")? ";"
		public Group getGroup() { return cGroup; }

		//("[" extendedAttributes+=InterfaceExtendedAttribute ("," extendedAttribute+=InterfaceExtendedAttribute)* "]")?
		public Group getGroup_0() { return cGroup_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }

		//extendedAttributes+=InterfaceExtendedAttribute
		public Assignment getExtendedAttributesAssignment_0_1() { return cExtendedAttributesAssignment_0_1; }

		//InterfaceExtendedAttribute
		public RuleCall getExtendedAttributesInterfaceExtendedAttributeParserRuleCall_0_1_0() { return cExtendedAttributesInterfaceExtendedAttributeParserRuleCall_0_1_0; }

		//("," extendedAttribute+=InterfaceExtendedAttribute)*
		public Group getGroup_0_2() { return cGroup_0_2; }

		//","
		public Keyword getCommaKeyword_0_2_0() { return cCommaKeyword_0_2_0; }

		//extendedAttribute+=InterfaceExtendedAttribute
		public Assignment getExtendedAttributeAssignment_0_2_1() { return cExtendedAttributeAssignment_0_2_1; }

		//InterfaceExtendedAttribute
		public RuleCall getExtendedAttributeInterfaceExtendedAttributeParserRuleCall_0_2_1_0() { return cExtendedAttributeInterfaceExtendedAttributeParserRuleCall_0_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_0_3() { return cRightSquareBracketKeyword_0_3; }

		//"interface"
		public Keyword getInterfaceKeyword_1() { return cInterfaceKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//((":" superType+=[Interface|ScopedName]) ("," superType+=[Interface|ScopedName])*)?
		public Group getGroup_3() { return cGroup_3; }

		//":" superType+=[Interface|ScopedName]
		public Group getGroup_3_0() { return cGroup_3_0; }

		//":"
		public Keyword getColonKeyword_3_0_0() { return cColonKeyword_3_0_0; }

		//superType+=[Interface|ScopedName]
		public Assignment getSuperTypeAssignment_3_0_1() { return cSuperTypeAssignment_3_0_1; }

		//[Interface|ScopedName]
		public CrossReference getSuperTypeInterfaceCrossReference_3_0_1_0() { return cSuperTypeInterfaceCrossReference_3_0_1_0; }

		//ScopedName
		public RuleCall getSuperTypeInterfaceScopedNameParserRuleCall_3_0_1_0_1() { return cSuperTypeInterfaceScopedNameParserRuleCall_3_0_1_0_1; }

		//("," superType+=[Interface|ScopedName])*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//superType+=[Interface|ScopedName]
		public Assignment getSuperTypeAssignment_3_1_1() { return cSuperTypeAssignment_3_1_1; }

		//[Interface|ScopedName]
		public CrossReference getSuperTypeInterfaceCrossReference_3_1_1_0() { return cSuperTypeInterfaceCrossReference_3_1_1_0; }

		//ScopedName
		public RuleCall getSuperTypeInterfaceScopedNameParserRuleCall_3_1_1_0_1() { return cSuperTypeInterfaceScopedNameParserRuleCall_3_1_1_0_1; }

		//("{" members+=InterfaceMember* "}")?
		public Group getGroup_4() { return cGroup_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }

		//members+=InterfaceMember*
		public Assignment getMembersAssignment_4_1() { return cMembersAssignment_4_1; }

		//InterfaceMember
		public RuleCall getMembersInterfaceMemberParserRuleCall_4_1_0() { return cMembersInterfaceMemberParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class InterfaceExtendedAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceExtendedAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCallbackParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstructorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNamedConstructorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNoInterfaceObjectParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPrototypeRootParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSupplementalParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cOverrideBuiltinsParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cReplaceableNamedPropertiesParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//InterfaceExtendedAttribute:
		//	Callback | Constructor | NamedConstructor | NoInterfaceObject | PrototypeRoot | Supplemental | OverrideBuiltins |
		//	ReplaceableNamedProperties;
		public ParserRule getRule() { return rule; }

		//Callback | Constructor | NamedConstructor | NoInterfaceObject | PrototypeRoot | Supplemental | OverrideBuiltins |
		//ReplaceableNamedProperties
		public Alternatives getAlternatives() { return cAlternatives; }

		//Callback
		public RuleCall getCallbackParserRuleCall_0() { return cCallbackParserRuleCall_0; }

		//Constructor
		public RuleCall getConstructorParserRuleCall_1() { return cConstructorParserRuleCall_1; }

		//NamedConstructor
		public RuleCall getNamedConstructorParserRuleCall_2() { return cNamedConstructorParserRuleCall_2; }

		//NoInterfaceObject
		public RuleCall getNoInterfaceObjectParserRuleCall_3() { return cNoInterfaceObjectParserRuleCall_3; }

		//PrototypeRoot
		public RuleCall getPrototypeRootParserRuleCall_4() { return cPrototypeRootParserRuleCall_4; }

		//Supplemental
		public RuleCall getSupplementalParserRuleCall_5() { return cSupplementalParserRuleCall_5; }

		//OverrideBuiltins
		public RuleCall getOverrideBuiltinsParserRuleCall_6() { return cOverrideBuiltinsParserRuleCall_6; }

		//ReplaceableNamedProperties
		public RuleCall getReplaceableNamedPropertiesParserRuleCall_7() { return cReplaceableNamedPropertiesParserRuleCall_7; }
	}

	public class InterfaceMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInterfaceFeatureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//InterfaceMember:
		//	Const | InterfaceFeature;
		public ParserRule getRule() { return rule; }

		//Const | InterfaceFeature
		public Alternatives getAlternatives() { return cAlternatives; }

		//Const
		public RuleCall getConstParserRuleCall_0() { return cConstParserRuleCall_0; }

		//InterfaceFeature
		public RuleCall getInterfaceFeatureParserRuleCall_1() { return cInterfaceFeatureParserRuleCall_1; }
	}

	public class InterfaceFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//InterfaceFeature:
		//	Attribute | Operation;
		public ParserRule getRule() { return rule; }

		//Attribute | Operation
		public Alternatives getAlternatives() { return cAlternatives; }

		//Attribute
		public RuleCall getAttributeParserRuleCall_0() { return cAttributeParserRuleCall_0; }

		//Operation
		public RuleCall getOperationParserRuleCall_1() { return cOperationParserRuleCall_1; }
	}

	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cExtendedAttributesAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExtendedAttributesOperationExtendedAttributeParserRuleCall_0_1_0 = (RuleCall)cExtendedAttributesAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cExtendedAttributesAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cExtendedAttributesOperationExtendedAttributeParserRuleCall_0_2_1_0 = (RuleCall)cExtendedAttributesAssignment_0_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cStringifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cStringifierStringifierKeyword_1_0 = (Keyword)cStringifierAssignment_1.eContents().get(0);
		private final Assignment cOmittableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cOmittableOmittableKeyword_2_0 = (Keyword)cOmittableAssignment_2.eContents().get(0);
		private final Assignment cSpecialsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSpecialsOperationSpecialParserRuleCall_3_0 = (RuleCall)cSpecialsAssignment_3.eContents().get(0);
		private final Assignment cReturnAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cReturnTypeRefParserRuleCall_4_0 = (RuleCall)cReturnAssignment_4.eContents().get(0);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIDTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cArgumentsAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cArgumentsArgumentParserRuleCall_7_0_0 = (RuleCall)cArgumentsAssignment_7_0.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cCommaKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cArgumentsArgumentParserRuleCall_7_1_1_0 = (RuleCall)cArgumentsAssignment_7_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cRaisesKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cRaisesAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final CrossReference cRaisesExceptionCrossReference_9_2_0 = (CrossReference)cRaisesAssignment_9_2.eContents().get(0);
		private final RuleCall cRaisesExceptionScopedNameParserRuleCall_9_2_0_1 = (RuleCall)cRaisesExceptionCrossReference_9_2_0.eContents().get(1);
		private final Group cGroup_9_3 = (Group)cGroup_9.eContents().get(3);
		private final Keyword cCommaKeyword_9_3_0 = (Keyword)cGroup_9_3.eContents().get(0);
		private final Assignment cRaisesAssignment_9_3_1 = (Assignment)cGroup_9_3.eContents().get(1);
		private final CrossReference cRaisesExceptionCrossReference_9_3_1_0 = (CrossReference)cRaisesAssignment_9_3_1.eContents().get(0);
		private final RuleCall cRaisesExceptionScopedNameParserRuleCall_9_3_1_0_1 = (RuleCall)cRaisesExceptionCrossReference_9_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_9_4 = (Keyword)cGroup_9.eContents().get(4);
		private final Keyword cSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//// Operation rules 
		//
		//Operation:
		//	("[" extendedAttributes+=OperationExtendedAttribute ("," extendedAttributes+=OperationExtendedAttribute)* "]")?
		//	stringifier?="stringifier"? omittable?="omittable"? specials+=OperationSpecial* return=TypeRef name=ID? "("
		//	(arguments+=Argument ("," arguments+=Argument)*)? ")" ("raises" "(" raises+=[Exception|ScopedName] (","
		//	raises+=[Exception|ScopedName])* ")")? ";";
		public ParserRule getRule() { return rule; }

		//("[" extendedAttributes+=OperationExtendedAttribute ("," extendedAttributes+=OperationExtendedAttribute)* "]")?
		//stringifier?="stringifier"? omittable?="omittable"? specials+=OperationSpecial* return=TypeRef name=ID? "("
		//(arguments+=Argument ("," arguments+=Argument)*)? ")" ("raises" "(" raises+=[Exception|ScopedName] (","
		//raises+=[Exception|ScopedName])* ")")? ";"
		public Group getGroup() { return cGroup; }

		//("[" extendedAttributes+=OperationExtendedAttribute ("," extendedAttributes+=OperationExtendedAttribute)* "]")?
		public Group getGroup_0() { return cGroup_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }

		//extendedAttributes+=OperationExtendedAttribute
		public Assignment getExtendedAttributesAssignment_0_1() { return cExtendedAttributesAssignment_0_1; }

		//OperationExtendedAttribute
		public RuleCall getExtendedAttributesOperationExtendedAttributeParserRuleCall_0_1_0() { return cExtendedAttributesOperationExtendedAttributeParserRuleCall_0_1_0; }

		//("," extendedAttributes+=OperationExtendedAttribute)*
		public Group getGroup_0_2() { return cGroup_0_2; }

		//","
		public Keyword getCommaKeyword_0_2_0() { return cCommaKeyword_0_2_0; }

		//extendedAttributes+=OperationExtendedAttribute
		public Assignment getExtendedAttributesAssignment_0_2_1() { return cExtendedAttributesAssignment_0_2_1; }

		//OperationExtendedAttribute
		public RuleCall getExtendedAttributesOperationExtendedAttributeParserRuleCall_0_2_1_0() { return cExtendedAttributesOperationExtendedAttributeParserRuleCall_0_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_0_3() { return cRightSquareBracketKeyword_0_3; }

		//stringifier?="stringifier"?
		public Assignment getStringifierAssignment_1() { return cStringifierAssignment_1; }

		//"stringifier"
		public Keyword getStringifierStringifierKeyword_1_0() { return cStringifierStringifierKeyword_1_0; }

		//omittable?="omittable"?
		public Assignment getOmittableAssignment_2() { return cOmittableAssignment_2; }

		//"omittable"
		public Keyword getOmittableOmittableKeyword_2_0() { return cOmittableOmittableKeyword_2_0; }

		//specials+=OperationSpecial*
		public Assignment getSpecialsAssignment_3() { return cSpecialsAssignment_3; }

		//OperationSpecial
		public RuleCall getSpecialsOperationSpecialParserRuleCall_3_0() { return cSpecialsOperationSpecialParserRuleCall_3_0; }

		//return=TypeRef
		public Assignment getReturnAssignment_4() { return cReturnAssignment_4; }

		//TypeRef
		public RuleCall getReturnTypeRefParserRuleCall_4_0() { return cReturnTypeRefParserRuleCall_4_0; }

		//name=ID?
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0() { return cNameIDTerminalRuleCall_5_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }

		//(arguments+=Argument ("," arguments+=Argument)*)?
		public Group getGroup_7() { return cGroup_7; }

		//arguments+=Argument
		public Assignment getArgumentsAssignment_7_0() { return cArgumentsAssignment_7_0; }

		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_7_0_0() { return cArgumentsArgumentParserRuleCall_7_0_0; }

		//("," arguments+=Argument)*
		public Group getGroup_7_1() { return cGroup_7_1; }

		//","
		public Keyword getCommaKeyword_7_1_0() { return cCommaKeyword_7_1_0; }

		//arguments+=Argument
		public Assignment getArgumentsAssignment_7_1_1() { return cArgumentsAssignment_7_1_1; }

		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_7_1_1_0() { return cArgumentsArgumentParserRuleCall_7_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }

		//("raises" "(" raises+=[Exception|ScopedName] ("," raises+=[Exception|ScopedName])* ")")?
		public Group getGroup_9() { return cGroup_9; }

		//"raises"
		public Keyword getRaisesKeyword_9_0() { return cRaisesKeyword_9_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_9_1() { return cLeftParenthesisKeyword_9_1; }

		//raises+=[Exception|ScopedName]
		public Assignment getRaisesAssignment_9_2() { return cRaisesAssignment_9_2; }

		//[Exception|ScopedName]
		public CrossReference getRaisesExceptionCrossReference_9_2_0() { return cRaisesExceptionCrossReference_9_2_0; }

		//ScopedName
		public RuleCall getRaisesExceptionScopedNameParserRuleCall_9_2_0_1() { return cRaisesExceptionScopedNameParserRuleCall_9_2_0_1; }

		//("," raises+=[Exception|ScopedName])*
		public Group getGroup_9_3() { return cGroup_9_3; }

		//","
		public Keyword getCommaKeyword_9_3_0() { return cCommaKeyword_9_3_0; }

		//raises+=[Exception|ScopedName]
		public Assignment getRaisesAssignment_9_3_1() { return cRaisesAssignment_9_3_1; }

		//[Exception|ScopedName]
		public CrossReference getRaisesExceptionCrossReference_9_3_1_0() { return cRaisesExceptionCrossReference_9_3_1_0; }

		//ScopedName
		public RuleCall getRaisesExceptionScopedNameParserRuleCall_9_3_1_0_1() { return cRaisesExceptionScopedNameParserRuleCall_9_3_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_9_4() { return cRightParenthesisKeyword_9_4; }

		//";"
		public Keyword getSemicolonKeyword_10() { return cSemicolonKeyword_10; }
	}

	public class OperationExtendedAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationExtendedAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTreatNullAsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTreatUndefinedAsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OperationExtendedAttribute:
		//	TreatNullAs | TreatUndefinedAs;
		public ParserRule getRule() { return rule; }

		//TreatNullAs | TreatUndefinedAs
		public Alternatives getAlternatives() { return cAlternatives; }

		//TreatNullAs
		public RuleCall getTreatNullAsParserRuleCall_0() { return cTreatNullAsParserRuleCall_0; }

		//TreatUndefinedAs
		public RuleCall getTreatUndefinedAsParserRuleCall_1() { return cTreatUndefinedAsParserRuleCall_1; }
	}

	public class OperationSpecialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationSpecial");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOperationSpecialGetterAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cGetterKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOperationSpecialSetterAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cSetterKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cOperationSpecialCreatorAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cCreatorKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cOperationSpecialDeleterAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cDeleterKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cOperationSpecialCallerAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cCallerKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		
		//OperationSpecial:
		//	{OperationSpecialGetter} "getter" | {OperationSpecialSetter} "setter" | {OperationSpecialCreator} "creator" |
		//	{OperationSpecialDeleter} "deleter" | {OperationSpecialCaller} "caller";
		public ParserRule getRule() { return rule; }

		//{OperationSpecialGetter} "getter" | {OperationSpecialSetter} "setter" | {OperationSpecialCreator} "creator" |
		//{OperationSpecialDeleter} "deleter" | {OperationSpecialCaller} "caller"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{OperationSpecialGetter} "getter"
		public Group getGroup_0() { return cGroup_0; }

		//{OperationSpecialGetter}
		public Action getOperationSpecialGetterAction_0_0() { return cOperationSpecialGetterAction_0_0; }

		//"getter"
		public Keyword getGetterKeyword_0_1() { return cGetterKeyword_0_1; }

		//{OperationSpecialSetter} "setter"
		public Group getGroup_1() { return cGroup_1; }

		//{OperationSpecialSetter}
		public Action getOperationSpecialSetterAction_1_0() { return cOperationSpecialSetterAction_1_0; }

		//"setter"
		public Keyword getSetterKeyword_1_1() { return cSetterKeyword_1_1; }

		//{OperationSpecialCreator} "creator"
		public Group getGroup_2() { return cGroup_2; }

		//{OperationSpecialCreator}
		public Action getOperationSpecialCreatorAction_2_0() { return cOperationSpecialCreatorAction_2_0; }

		//"creator"
		public Keyword getCreatorKeyword_2_1() { return cCreatorKeyword_2_1; }

		//{OperationSpecialDeleter} "deleter"
		public Group getGroup_3() { return cGroup_3; }

		//{OperationSpecialDeleter}
		public Action getOperationSpecialDeleterAction_3_0() { return cOperationSpecialDeleterAction_3_0; }

		//"deleter"
		public Keyword getDeleterKeyword_3_1() { return cDeleterKeyword_3_1; }

		//{OperationSpecialCaller} "caller"
		public Group getGroup_4() { return cGroup_4; }

		//{OperationSpecialCaller}
		public Action getOperationSpecialCallerAction_4_0() { return cOperationSpecialCallerAction_4_0; }

		//"caller"
		public Keyword getCallerKeyword_4_1() { return cCallerKeyword_4_1; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cExtendedAttributesAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExtendedAttributesAttributeExtendedAttributeParserRuleCall_0_1_0 = (RuleCall)cExtendedAttributesAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cExtendedAttributesAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cExtendedAttributesAttributeExtendedAttributeParserRuleCall_0_2_1_0 = (RuleCall)cExtendedAttributesAssignment_0_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cStringifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cStringifierStringifierKeyword_1_0 = (Keyword)cStringifierAssignment_1.eContents().get(0);
		private final Keyword cReadonlyKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cAttributeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeTypeRefParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameScopedNameParserRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cGroup_6.eContents().get(0);
		private final Keyword cGetraisesKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6_0_1 = (Keyword)cGroup_6_0.eContents().get(1);
		private final Assignment cGetRaisesAssignment_6_0_2 = (Assignment)cGroup_6_0.eContents().get(2);
		private final CrossReference cGetRaisesExceptionCrossReference_6_0_2_0 = (CrossReference)cGetRaisesAssignment_6_0_2.eContents().get(0);
		private final RuleCall cGetRaisesExceptionScopedNameParserRuleCall_6_0_2_0_1 = (RuleCall)cGetRaisesExceptionCrossReference_6_0_2_0.eContents().get(1);
		private final Group cGroup_6_0_3 = (Group)cGroup_6_0.eContents().get(3);
		private final Keyword cCommaKeyword_6_0_3_0 = (Keyword)cGroup_6_0_3.eContents().get(0);
		private final Assignment cGetRaisesAssignment_6_0_3_1 = (Assignment)cGroup_6_0_3.eContents().get(1);
		private final CrossReference cGetRaisesExceptionCrossReference_6_0_3_1_0 = (CrossReference)cGetRaisesAssignment_6_0_3_1.eContents().get(0);
		private final RuleCall cGetRaisesExceptionScopedNameParserRuleCall_6_0_3_1_0_1 = (RuleCall)cGetRaisesExceptionCrossReference_6_0_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6_0_4 = (Keyword)cGroup_6_0.eContents().get(4);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cSetraisesKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6_1_1 = (Keyword)cGroup_6_1.eContents().get(1);
		private final Assignment cSetRaisesAssignment_6_1_2 = (Assignment)cGroup_6_1.eContents().get(2);
		private final CrossReference cSetRaisesExceptionCrossReference_6_1_2_0 = (CrossReference)cSetRaisesAssignment_6_1_2.eContents().get(0);
		private final RuleCall cSetRaisesExceptionScopedNameParserRuleCall_6_1_2_0_1 = (RuleCall)cSetRaisesExceptionCrossReference_6_1_2_0.eContents().get(1);
		private final Group cGroup_6_1_3 = (Group)cGroup_6_1.eContents().get(3);
		private final Keyword cCommaKeyword_6_1_3_0 = (Keyword)cGroup_6_1_3.eContents().get(0);
		private final Assignment cSetRaisesAssignment_6_1_3_1 = (Assignment)cGroup_6_1_3.eContents().get(1);
		private final CrossReference cSetRaisesExceptionCrossReference_6_1_3_1_0 = (CrossReference)cSetRaisesAssignment_6_1_3_1.eContents().get(0);
		private final RuleCall cSetRaisesExceptionScopedNameParserRuleCall_6_1_3_1_0_1 = (RuleCall)cSetRaisesExceptionCrossReference_6_1_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6_1_4 = (Keyword)cGroup_6_1.eContents().get(4);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// Attribute
		//
		//Attribute:
		//	("[" extendedAttributes+=AttributeExtendedAttribute ("," extendedAttributes+=AttributeExtendedAttribute)* "]")?
		//	stringifier?="stringifier"? "readonly"? "attribute" type=TypeRef name=ScopedName (("getraises" "("
		//	getRaises+=[Exception|ScopedName] ("," getRaises+=[Exception|ScopedName])* ")")? ("setraises" "("
		//	setRaises+=[Exception|ScopedName] ("," setRaises+=[Exception|ScopedName])* ")")?) ";";
		public ParserRule getRule() { return rule; }

		//("[" extendedAttributes+=AttributeExtendedAttribute ("," extendedAttributes+=AttributeExtendedAttribute)* "]")?
		//stringifier?="stringifier"? "readonly"? "attribute" type=TypeRef name=ScopedName (("getraises" "("
		//getRaises+=[Exception|ScopedName] ("," getRaises+=[Exception|ScopedName])* ")")? ("setraises" "("
		//setRaises+=[Exception|ScopedName] ("," setRaises+=[Exception|ScopedName])* ")")?) ";"
		public Group getGroup() { return cGroup; }

		//("[" extendedAttributes+=AttributeExtendedAttribute ("," extendedAttributes+=AttributeExtendedAttribute)* "]")?
		public Group getGroup_0() { return cGroup_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }

		//extendedAttributes+=AttributeExtendedAttribute
		public Assignment getExtendedAttributesAssignment_0_1() { return cExtendedAttributesAssignment_0_1; }

		//AttributeExtendedAttribute
		public RuleCall getExtendedAttributesAttributeExtendedAttributeParserRuleCall_0_1_0() { return cExtendedAttributesAttributeExtendedAttributeParserRuleCall_0_1_0; }

		//("," extendedAttributes+=AttributeExtendedAttribute)*
		public Group getGroup_0_2() { return cGroup_0_2; }

		//","
		public Keyword getCommaKeyword_0_2_0() { return cCommaKeyword_0_2_0; }

		//extendedAttributes+=AttributeExtendedAttribute
		public Assignment getExtendedAttributesAssignment_0_2_1() { return cExtendedAttributesAssignment_0_2_1; }

		//AttributeExtendedAttribute
		public RuleCall getExtendedAttributesAttributeExtendedAttributeParserRuleCall_0_2_1_0() { return cExtendedAttributesAttributeExtendedAttributeParserRuleCall_0_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_0_3() { return cRightSquareBracketKeyword_0_3; }

		//stringifier?="stringifier"?
		public Assignment getStringifierAssignment_1() { return cStringifierAssignment_1; }

		//"stringifier"
		public Keyword getStringifierStringifierKeyword_1_0() { return cStringifierStringifierKeyword_1_0; }

		//"readonly"?
		public Keyword getReadonlyKeyword_2() { return cReadonlyKeyword_2; }

		//"attribute"
		public Keyword getAttributeKeyword_3() { return cAttributeKeyword_3; }

		//type=TypeRef
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_4_0() { return cTypeTypeRefParserRuleCall_4_0; }

		//name=ScopedName
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//ScopedName
		public RuleCall getNameScopedNameParserRuleCall_5_0() { return cNameScopedNameParserRuleCall_5_0; }

		//("getraises" "(" getRaises+=[Exception|ScopedName] ("," getRaises+=[Exception|ScopedName])* ")")? ("setraises" "("
		//setRaises+=[Exception|ScopedName] ("," setRaises+=[Exception|ScopedName])* ")")?
		public Group getGroup_6() { return cGroup_6; }

		//("getraises" "(" getRaises+=[Exception|ScopedName] ("," getRaises+=[Exception|ScopedName])* ")")?
		public Group getGroup_6_0() { return cGroup_6_0; }

		//"getraises"
		public Keyword getGetraisesKeyword_6_0_0() { return cGetraisesKeyword_6_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_6_0_1() { return cLeftParenthesisKeyword_6_0_1; }

		//getRaises+=[Exception|ScopedName]
		public Assignment getGetRaisesAssignment_6_0_2() { return cGetRaisesAssignment_6_0_2; }

		//[Exception|ScopedName]
		public CrossReference getGetRaisesExceptionCrossReference_6_0_2_0() { return cGetRaisesExceptionCrossReference_6_0_2_0; }

		//ScopedName
		public RuleCall getGetRaisesExceptionScopedNameParserRuleCall_6_0_2_0_1() { return cGetRaisesExceptionScopedNameParserRuleCall_6_0_2_0_1; }

		//("," getRaises+=[Exception|ScopedName])*
		public Group getGroup_6_0_3() { return cGroup_6_0_3; }

		//","
		public Keyword getCommaKeyword_6_0_3_0() { return cCommaKeyword_6_0_3_0; }

		//getRaises+=[Exception|ScopedName]
		public Assignment getGetRaisesAssignment_6_0_3_1() { return cGetRaisesAssignment_6_0_3_1; }

		//[Exception|ScopedName]
		public CrossReference getGetRaisesExceptionCrossReference_6_0_3_1_0() { return cGetRaisesExceptionCrossReference_6_0_3_1_0; }

		//ScopedName
		public RuleCall getGetRaisesExceptionScopedNameParserRuleCall_6_0_3_1_0_1() { return cGetRaisesExceptionScopedNameParserRuleCall_6_0_3_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_6_0_4() { return cRightParenthesisKeyword_6_0_4; }

		//("setraises" "(" setRaises+=[Exception|ScopedName] ("," setRaises+=[Exception|ScopedName])* ")")?
		public Group getGroup_6_1() { return cGroup_6_1; }

		//"setraises"
		public Keyword getSetraisesKeyword_6_1_0() { return cSetraisesKeyword_6_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_6_1_1() { return cLeftParenthesisKeyword_6_1_1; }

		//setRaises+=[Exception|ScopedName]
		public Assignment getSetRaisesAssignment_6_1_2() { return cSetRaisesAssignment_6_1_2; }

		//[Exception|ScopedName]
		public CrossReference getSetRaisesExceptionCrossReference_6_1_2_0() { return cSetRaisesExceptionCrossReference_6_1_2_0; }

		//ScopedName
		public RuleCall getSetRaisesExceptionScopedNameParserRuleCall_6_1_2_0_1() { return cSetRaisesExceptionScopedNameParserRuleCall_6_1_2_0_1; }

		//("," setRaises+=[Exception|ScopedName])*
		public Group getGroup_6_1_3() { return cGroup_6_1_3; }

		//","
		public Keyword getCommaKeyword_6_1_3_0() { return cCommaKeyword_6_1_3_0; }

		//setRaises+=[Exception|ScopedName]
		public Assignment getSetRaisesAssignment_6_1_3_1() { return cSetRaisesAssignment_6_1_3_1; }

		//[Exception|ScopedName]
		public CrossReference getSetRaisesExceptionCrossReference_6_1_3_1_0() { return cSetRaisesExceptionCrossReference_6_1_3_1_0; }

		//ScopedName
		public RuleCall getSetRaisesExceptionScopedNameParserRuleCall_6_1_3_1_0_1() { return cSetRaisesExceptionScopedNameParserRuleCall_6_1_3_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_6_1_4() { return cRightParenthesisKeyword_6_1_4; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class AttributeExtendedAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeExtendedAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPutForwardsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReplaceableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTreatNullAsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTreatUndefinedAsParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//AttributeExtendedAttribute:
		//	PutForwards | Replaceable | TreatNullAs | TreatUndefinedAs;
		public ParserRule getRule() { return rule; }

		//PutForwards | Replaceable | TreatNullAs | TreatUndefinedAs
		public Alternatives getAlternatives() { return cAlternatives; }

		//PutForwards
		public RuleCall getPutForwardsParserRuleCall_0() { return cPutForwardsParserRuleCall_0; }

		//Replaceable
		public RuleCall getReplaceableParserRuleCall_1() { return cReplaceableParserRuleCall_1; }

		//TreatNullAs
		public RuleCall getTreatNullAsParserRuleCall_2() { return cTreatNullAsParserRuleCall_2; }

		//TreatUndefinedAs
		public RuleCall getTreatUndefinedAsParserRuleCall_3() { return cTreatUndefinedAsParserRuleCall_3; }
	}

	public class ExceptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exception");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cExtendedAttributesAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExtendedAttributesExceptionExtendedAttributeParserRuleCall_0_1_0 = (RuleCall)cExtendedAttributesAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cExtendedAttributesAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cExtendedAttributesExceptionExtendedAttributeParserRuleCall_0_2_1_0 = (RuleCall)cExtendedAttributesAssignment_0_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Keyword cExceptionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMembersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMembersExceptionMemberParserRuleCall_4_0 = (RuleCall)cMembersAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// Exception rules
		//
		//Exception:
		//	("[" extendedAttributes+=ExceptionExtendedAttribute ("," extendedAttributes+=ExceptionExtendedAttribute)* "]")?
		//	"exception" name=ID "{" members+=ExceptionMember* "}" ";";
		public ParserRule getRule() { return rule; }

		//("[" extendedAttributes+=ExceptionExtendedAttribute ("," extendedAttributes+=ExceptionExtendedAttribute)* "]")?
		//"exception" name=ID "{" members+=ExceptionMember* "}" ";"
		public Group getGroup() { return cGroup; }

		//("[" extendedAttributes+=ExceptionExtendedAttribute ("," extendedAttributes+=ExceptionExtendedAttribute)* "]")?
		public Group getGroup_0() { return cGroup_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }

		//extendedAttributes+=ExceptionExtendedAttribute
		public Assignment getExtendedAttributesAssignment_0_1() { return cExtendedAttributesAssignment_0_1; }

		//ExceptionExtendedAttribute
		public RuleCall getExtendedAttributesExceptionExtendedAttributeParserRuleCall_0_1_0() { return cExtendedAttributesExceptionExtendedAttributeParserRuleCall_0_1_0; }

		//("," extendedAttributes+=ExceptionExtendedAttribute)*
		public Group getGroup_0_2() { return cGroup_0_2; }

		//","
		public Keyword getCommaKeyword_0_2_0() { return cCommaKeyword_0_2_0; }

		//extendedAttributes+=ExceptionExtendedAttribute
		public Assignment getExtendedAttributesAssignment_0_2_1() { return cExtendedAttributesAssignment_0_2_1; }

		//ExceptionExtendedAttribute
		public RuleCall getExtendedAttributesExceptionExtendedAttributeParserRuleCall_0_2_1_0() { return cExtendedAttributesExceptionExtendedAttributeParserRuleCall_0_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_0_3() { return cRightSquareBracketKeyword_0_3; }

		//"exception"
		public Keyword getExceptionKeyword_1() { return cExceptionKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//members+=ExceptionMember*
		public Assignment getMembersAssignment_4() { return cMembersAssignment_4; }

		//ExceptionMember
		public RuleCall getMembersExceptionMemberParserRuleCall_4_0() { return cMembersExceptionMemberParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class ExceptionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExceptionMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExceptionFieldParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ExceptionMember:
		//	Const | ExceptionField;
		public ParserRule getRule() { return rule; }

		//Const | ExceptionField
		public Alternatives getAlternatives() { return cAlternatives; }

		//Const
		public RuleCall getConstParserRuleCall_0() { return cConstParserRuleCall_0; }

		//ExceptionField
		public RuleCall getExceptionFieldParserRuleCall_1() { return cExceptionFieldParserRuleCall_1; }
	}

	public class ExceptionFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExceptionField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeRefParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ExceptionField:
		//	type=TypeRef name=ID ";";
		public ParserRule getRule() { return rule; }

		//type=TypeRef name=ID ";"
		public Group getGroup() { return cGroup; }

		//type=TypeRef
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_0_0() { return cTypeTypeRefParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ExceptionExtendedAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExceptionExtendedAttribute");
		private final RuleCall cNoInterfaceObjectParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ExceptionExtendedAttribute:
		//	NoInterfaceObject;
		public ParserRule getRule() { return rule; }

		//NoInterfaceObject
		public RuleCall getNoInterfaceObjectParserRuleCall() { return cNoInterfaceObjectParserRuleCall; }
	}

	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Argument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cExtendedAttributesAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExtendedAttributesArgumentExtendedAttributeParserRuleCall_0_1_0 = (RuleCall)cExtendedAttributesAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cExtendedAttributesAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cExtendedAttributesArgumentExtendedAttributeParserRuleCall_0_2_1_0 = (RuleCall)cExtendedAttributesAssignment_0_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cInAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cInInKeyword_1_0 = (Keyword)cInAssignment_1.eContents().get(0);
		private final Assignment cOptionalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cOptionalOptionalKeyword_2_0 = (Keyword)cOptionalAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeRefParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cEllipsisAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cEllipsisFullStopFullStopFullStopKeyword_4_0 = (Keyword)cEllipsisAssignment_4.eContents().get(0);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIDTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		
		//// Argument rules
		//
		//Argument:
		//	("[" extendedAttributes+=ArgumentExtendedAttribute ("," extendedAttributes+=ArgumentExtendedAttribute)* "]")?
		//	in?="in"? optional?="optional"? type=TypeRef ellipsis?="..."? name=ID;
		public ParserRule getRule() { return rule; }

		//("[" extendedAttributes+=ArgumentExtendedAttribute ("," extendedAttributes+=ArgumentExtendedAttribute)* "]")? in?="in"?
		//optional?="optional"? type=TypeRef ellipsis?="..."? name=ID
		public Group getGroup() { return cGroup; }

		//("[" extendedAttributes+=ArgumentExtendedAttribute ("," extendedAttributes+=ArgumentExtendedAttribute)* "]")?
		public Group getGroup_0() { return cGroup_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }

		//extendedAttributes+=ArgumentExtendedAttribute
		public Assignment getExtendedAttributesAssignment_0_1() { return cExtendedAttributesAssignment_0_1; }

		//ArgumentExtendedAttribute
		public RuleCall getExtendedAttributesArgumentExtendedAttributeParserRuleCall_0_1_0() { return cExtendedAttributesArgumentExtendedAttributeParserRuleCall_0_1_0; }

		//("," extendedAttributes+=ArgumentExtendedAttribute)*
		public Group getGroup_0_2() { return cGroup_0_2; }

		//","
		public Keyword getCommaKeyword_0_2_0() { return cCommaKeyword_0_2_0; }

		//extendedAttributes+=ArgumentExtendedAttribute
		public Assignment getExtendedAttributesAssignment_0_2_1() { return cExtendedAttributesAssignment_0_2_1; }

		//ArgumentExtendedAttribute
		public RuleCall getExtendedAttributesArgumentExtendedAttributeParserRuleCall_0_2_1_0() { return cExtendedAttributesArgumentExtendedAttributeParserRuleCall_0_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_0_3() { return cRightSquareBracketKeyword_0_3; }

		//in?="in"?
		public Assignment getInAssignment_1() { return cInAssignment_1; }

		//"in"
		public Keyword getInInKeyword_1_0() { return cInInKeyword_1_0; }

		//optional?="optional"?
		public Assignment getOptionalAssignment_2() { return cOptionalAssignment_2; }

		//"optional"
		public Keyword getOptionalOptionalKeyword_2_0() { return cOptionalOptionalKeyword_2_0; }

		//type=TypeRef
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_3_0() { return cTypeTypeRefParserRuleCall_3_0; }

		//ellipsis?="..."?
		public Assignment getEllipsisAssignment_4() { return cEllipsisAssignment_4; }

		//"..."
		public Keyword getEllipsisFullStopFullStopFullStopKeyword_4_0() { return cEllipsisFullStopFullStopFullStopKeyword_4_0; }

		//name=ID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0() { return cNameIDTerminalRuleCall_5_0; }
	}

	public class ArgumentExtendedAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArgumentExtendedAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAllowAnyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTreatNullAsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTreatUndefinedAsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ArgumentExtendedAttribute:
		//	AllowAny | TreatNullAs | TreatUndefinedAs;
		public ParserRule getRule() { return rule; }

		//AllowAny | TreatNullAs | TreatUndefinedAs
		public Alternatives getAlternatives() { return cAlternatives; }

		//AllowAny
		public RuleCall getAllowAnyParserRuleCall_0() { return cAllowAnyParserRuleCall_0; }

		//TreatNullAs
		public RuleCall getTreatNullAsParserRuleCall_1() { return cTreatNullAsParserRuleCall_1; }

		//TreatUndefinedAs
		public RuleCall getTreatUndefinedAsParserRuleCall_2() { return cTreatUndefinedAsParserRuleCall_2; }
	}

	public class ConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Const");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeRefParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExprConstExprParserRuleCall_4_0 = (RuleCall)cExprAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// Const rules
		//
		//Const:
		//	"const" type=TypeRef name+=ID "=" expr=ConstExpr ";";
		public ParserRule getRule() { return rule; }

		//"const" type=TypeRef name+=ID "=" expr=ConstExpr ";"
		public Group getGroup() { return cGroup; }

		//"const"
		public Keyword getConstKeyword_0() { return cConstKeyword_0; }

		//type=TypeRef
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_1_0() { return cTypeTypeRefParserRuleCall_1_0; }

		//name+=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//expr=ConstExpr
		public Assignment getExprAssignment_4() { return cExprAssignment_4; }

		//ConstExpr
		public RuleCall getExprConstExprParserRuleCall_4_0() { return cExprConstExprParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class ConstExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cConstExprAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cConstExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cXKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//ConstExpr:
		//	{ConstExpr} STRING | {ConstExpr} "0x"? INT;
		public ParserRule getRule() { return rule; }

		//{ConstExpr} STRING | {ConstExpr} "0x"? INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ConstExpr} STRING
		public Group getGroup_0() { return cGroup_0; }

		//{ConstExpr}
		public Action getConstExprAction_0_0() { return cConstExprAction_0_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0_1() { return cSTRINGTerminalRuleCall_0_1; }

		//{ConstExpr} "0x"? INT
		public Group getGroup_1() { return cGroup_1; }

		//{ConstExpr}
		public Action getConstExprAction_1_0() { return cConstExprAction_1_0; }

		//"0x"?
		public Keyword getXKeyword_1_1() { return cXKeyword_1_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_2() { return cINTTerminalRuleCall_1_2; }
	}
	
	
	private IDLDefinitionsElements pIDLDefinitions;
	private ImportElements pImport;
	private TypeDefElements pTypeDef;
	private TypeRefElements pTypeRef;
	private UserTypeRefElements pUserTypeRef;
	private TypesElements pTypes;
	private PrimitiveTypeRefElements pPrimitiveTypeRef;
	private SequenceTypeElements pSequenceType;
	private ScopedNameElements pScopedName;
	private CallableElements pCallable;
	private ConstructorElements pConstructor;
	private NamedConstructorElements pNamedConstructor;
	private CallbackElements pCallback;
	private NoInterfaceObjectElements pNoInterfaceObject;
	private OverrideBuiltinsElements pOverrideBuiltins;
	private PrototypeRootElements pPrototypeRoot;
	private PutForwardsElements pPutForwards;
	private TreatNullAsElements pTreatNullAs;
	private TreatUndefinedAsElements pTreatUndefinedAs;
	private AllowAnyElements pAllowAny;
	private ReplaceableElements pReplaceable;
	private SupplementalElements pSupplemental;
	private ReplaceableNamedPropertiesElements pReplaceableNamedProperties;
	private AbstractDefinitionsElements pAbstractDefinitions;
	private DefinitionsElements pDefinitions;
	private ImplementStatementElements pImplementStatement;
	private ModuleElements pModule;
	private ModuleExtendedAttributeElements pModuleExtendedAttribute;
	private PrefixElements pPrefix;
	private NamespaceObjectElements pNamespaceObject;
	private InterfaceElements pInterface;
	private InterfaceExtendedAttributeElements pInterfaceExtendedAttribute;
	private InterfaceMemberElements pInterfaceMember;
	private InterfaceFeatureElements pInterfaceFeature;
	private OperationElements pOperation;
	private OperationExtendedAttributeElements pOperationExtendedAttribute;
	private OperationSpecialElements pOperationSpecial;
	private AttributeElements pAttribute;
	private AttributeExtendedAttributeElements pAttributeExtendedAttribute;
	private ExceptionElements pException;
	private ExceptionMemberElements pExceptionMember;
	private ExceptionFieldElements pExceptionField;
	private ExceptionExtendedAttributeElements pExceptionExtendedAttribute;
	private ArgumentElements pArgument;
	private ArgumentExtendedAttributeElements pArgumentExtendedAttribute;
	private ConstElements pConst;
	private ConstExprElements pConstExpr;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public WebIDLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//IDLDefinitions:
	//	imports+=Import* definitions+=AbstractDefinitions*;
	public IDLDefinitionsElements getIDLDefinitionsAccess() {
		return (pIDLDefinitions != null) ? pIDLDefinitions : (pIDLDefinitions = new IDLDefinitionsElements());
	}
	
	public ParserRule getIDLDefinitionsRule() {
		return getIDLDefinitionsAccess().getRule();
	}

	//Import:
	//	"import" importURI=STRING ";";
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//// Common and type declaration definitions
	//
	//TypeDef:
	//	"typedef" type=TypeRef name=ID ";";
	public TypeDefElements getTypeDefAccess() {
		return (pTypeDef != null) ? pTypeDef : (pTypeDef = new TypeDefElements());
	}
	
	public ParserRule getTypeDefRule() {
		return getTypeDefAccess().getRule();
	}

	//TypeRef:
	//	PrimitiveTypeRef isArray?="[]"? | SequenceType isArray?="[]"? | UserTypeRef isArray?="[]"?;
	public TypeRefElements getTypeRefAccess() {
		return (pTypeRef != null) ? pTypeRef : (pTypeRef = new TypeRefElements());
	}
	
	public ParserRule getTypeRefRule() {
		return getTypeRefAccess().getRule();
	}

	//UserTypeRef:
	//	type=[Types|ScopedName];
	public UserTypeRefElements getUserTypeRefAccess() {
		return (pUserTypeRef != null) ? pUserTypeRef : (pUserTypeRef = new UserTypeRefElements());
	}
	
	public ParserRule getUserTypeRefRule() {
		return getUserTypeRefAccess().getRule();
	}

	//Types:
	//	TypeDef | Interface | InterfaceFeature;
	public TypesElements getTypesAccess() {
		return (pTypes != null) ? pTypes : (pTypes = new TypesElements());
	}
	
	public ParserRule getTypesRule() {
		return getTypesAccess().getRule();
	}

	//PrimitiveTypeRef:
	//	unsigned?="unsigned"? name=("void" | "boolean" | "byte" | "double" | "float" | "short" | "long" | "Object" | "object"
	//	| "any" | "octet" | "DOMString")+ nullable?="?"?;
	public PrimitiveTypeRefElements getPrimitiveTypeRefAccess() {
		return (pPrimitiveTypeRef != null) ? pPrimitiveTypeRef : (pPrimitiveTypeRef = new PrimitiveTypeRefElements());
	}
	
	public ParserRule getPrimitiveTypeRefRule() {
		return getPrimitiveTypeRefAccess().getRule();
	}

	//SequenceType:
	//	"sequence<" type=TypeRef ">" nullable?="?"?;
	public SequenceTypeElements getSequenceTypeAccess() {
		return (pSequenceType != null) ? pSequenceType : (pSequenceType = new SequenceTypeElements());
	}
	
	public ParserRule getSequenceTypeRule() {
		return getSequenceTypeAccess().getRule();
	}

	//ScopedName:
	//	ID ("::" ID)*;
	public ScopedNameElements getScopedNameAccess() {
		return (pScopedName != null) ? pScopedName : (pScopedName = new ScopedNameElements());
	}
	
	public ParserRule getScopedNameRule() {
		return getScopedNameAccess().getRule();
	}

	//// Extended Attributes 
	//
	//Callable:
	//	"Callable" target=[Operation|ScopedName];
	public CallableElements getCallableAccess() {
		return (pCallable != null) ? pCallable : (pCallable = new CallableElements());
	}
	
	public ParserRule getCallableRule() {
		return getCallableAccess().getRule();
	}

	//Constructor:
	//	"Constructor" {Constructor} ("(" arguments+=Argument ("," arguments+=Argument)* ")")?;
	public ConstructorElements getConstructorAccess() {
		return (pConstructor != null) ? pConstructor : (pConstructor = new ConstructorElements());
	}
	
	public ParserRule getConstructorRule() {
		return getConstructorAccess().getRule();
	}

	//NamedConstructor:
	//	"NamedConstructor" {Constructor} "=" name=ID ("(" (arguments+=Argument ("," arguments+=Argument)*)? ")")?;
	public NamedConstructorElements getNamedConstructorAccess() {
		return (pNamedConstructor != null) ? pNamedConstructor : (pNamedConstructor = new NamedConstructorElements());
	}
	
	public ParserRule getNamedConstructorRule() {
		return getNamedConstructorAccess().getRule();
	}

	//Callback:
	//	"Callback" {Callback} | "Callback" "=" functionOnly?="FunctionOnly" | "Callback" "=" propertyOnly?="PropertyOnly";
	public CallbackElements getCallbackAccess() {
		return (pCallback != null) ? pCallback : (pCallback = new CallbackElements());
	}
	
	public ParserRule getCallbackRule() {
		return getCallbackAccess().getRule();
	}

	//NoInterfaceObject:
	//	{NoInterfaceObject} "NoInterfaceObject";
	public NoInterfaceObjectElements getNoInterfaceObjectAccess() {
		return (pNoInterfaceObject != null) ? pNoInterfaceObject : (pNoInterfaceObject = new NoInterfaceObjectElements());
	}
	
	public ParserRule getNoInterfaceObjectRule() {
		return getNoInterfaceObjectAccess().getRule();
	}

	//OverrideBuiltins:
	//	"OverrideBuiltins";
	public OverrideBuiltinsElements getOverrideBuiltinsAccess() {
		return (pOverrideBuiltins != null) ? pOverrideBuiltins : (pOverrideBuiltins = new OverrideBuiltinsElements());
	}
	
	public ParserRule getOverrideBuiltinsRule() {
		return getOverrideBuiltinsAccess().getRule();
	}

	//PrototypeRoot:
	//	{PrototypeRoot} "PrototypeRoot";
	public PrototypeRootElements getPrototypeRootAccess() {
		return (pPrototypeRoot != null) ? pPrototypeRoot : (pPrototypeRoot = new PrototypeRootElements());
	}
	
	public ParserRule getPrototypeRootRule() {
		return getPrototypeRootAccess().getRule();
	}

	//PutForwards:
	//	"PutForwards" "=" target=[Attribute];
	public PutForwardsElements getPutForwardsAccess() {
		return (pPutForwards != null) ? pPutForwards : (pPutForwards = new PutForwardsElements());
	}
	
	public ParserRule getPutForwardsRule() {
		return getPutForwardsAccess().getRule();
	}

	//TreatNullAs:
	//	{TreatNullAs} "TreatNullAs" "=" "EmptyString";
	public TreatNullAsElements getTreatNullAsAccess() {
		return (pTreatNullAs != null) ? pTreatNullAs : (pTreatNullAs = new TreatNullAsElements());
	}
	
	public ParserRule getTreatNullAsRule() {
		return getTreatNullAsAccess().getRule();
	}

	//TreatUndefinedAs:
	//	{TreatUndefinedAs} "TreatUndefinedAs" "=" asEmptyString?="EmptyString" | {TreatUndefinedAs} "TreatUndefinedAs" "="
	//	asNull?="null";
	public TreatUndefinedAsElements getTreatUndefinedAsAccess() {
		return (pTreatUndefinedAs != null) ? pTreatUndefinedAs : (pTreatUndefinedAs = new TreatUndefinedAsElements());
	}
	
	public ParserRule getTreatUndefinedAsRule() {
		return getTreatUndefinedAsAccess().getRule();
	}

	//AllowAny:
	//	{AllowAny} "AllowAny";
	public AllowAnyElements getAllowAnyAccess() {
		return (pAllowAny != null) ? pAllowAny : (pAllowAny = new AllowAnyElements());
	}
	
	public ParserRule getAllowAnyRule() {
		return getAllowAnyAccess().getRule();
	}

	//Replaceable:
	//	{Replaceable} "Replaceable";
	public ReplaceableElements getReplaceableAccess() {
		return (pReplaceable != null) ? pReplaceable : (pReplaceable = new ReplaceableElements());
	}
	
	public ParserRule getReplaceableRule() {
		return getReplaceableAccess().getRule();
	}

	//Supplemental:
	//	{Supplemental} "Supplemental";
	public SupplementalElements getSupplementalAccess() {
		return (pSupplemental != null) ? pSupplemental : (pSupplemental = new SupplementalElements());
	}
	
	public ParserRule getSupplementalRule() {
		return getSupplementalAccess().getRule();
	}

	//ReplaceableNamedProperties:
	//	{ReplaceableNamedProperties} "ReplaceableNamedProperties";
	public ReplaceableNamedPropertiesElements getReplaceableNamedPropertiesAccess() {
		return (pReplaceableNamedProperties != null) ? pReplaceableNamedProperties : (pReplaceableNamedProperties = new ReplaceableNamedPropertiesElements());
	}
	
	public ParserRule getReplaceableNamedPropertiesRule() {
		return getReplaceableNamedPropertiesAccess().getRule();
	}

	//AbstractDefinitions:
	//	Definitions | Module;
	public AbstractDefinitionsElements getAbstractDefinitionsAccess() {
		return (pAbstractDefinitions != null) ? pAbstractDefinitions : (pAbstractDefinitions = new AbstractDefinitionsElements());
	}
	
	public ParserRule getAbstractDefinitionsRule() {
		return getAbstractDefinitionsAccess().getRule();
	}

	////TODO: ValueTypeDef is not part of webidl spec
	//
	//Definitions:
	//	Interface | Exception | TypeDef | ImplementStatement;
	public DefinitionsElements getDefinitionsAccess() {
		return (pDefinitions != null) ? pDefinitions : (pDefinitions = new DefinitionsElements());
	}
	
	public ParserRule getDefinitionsRule() {
		return getDefinitionsAccess().getRule();
	}

	//ImplementStatement:
	//	source=[Interface|ScopedName] "implements" target=[Interface|ScopedName] ";";
	public ImplementStatementElements getImplementStatementAccess() {
		return (pImplementStatement != null) ? pImplementStatement : (pImplementStatement = new ImplementStatementElements());
	}
	
	public ParserRule getImplementStatementRule() {
		return getImplementStatementAccess().getRule();
	}

	//// Module rules
	//
	//Module:
	//	("[" extendedAttributes+=ModuleExtendedAttribute ("," extendedAttributes+=ModuleExtendedAttribute)* "]")? "module"
	//	name=ScopedName "{" definitions+=AbstractDefinitions+ "}" ";";
	public ModuleElements getModuleAccess() {
		return (pModule != null) ? pModule : (pModule = new ModuleElements());
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}

	//ModuleExtendedAttribute:
	//	Prefix | NamespaceObject;
	public ModuleExtendedAttributeElements getModuleExtendedAttributeAccess() {
		return (pModuleExtendedAttribute != null) ? pModuleExtendedAttribute : (pModuleExtendedAttribute = new ModuleExtendedAttributeElements());
	}
	
	public ParserRule getModuleExtendedAttributeRule() {
		return getModuleExtendedAttributeAccess().getRule();
	}

	//Prefix:
	//	"Prefix" "=" value+=ScopedName;
	public PrefixElements getPrefixAccess() {
		return (pPrefix != null) ? pPrefix : (pPrefix = new PrefixElements());
	}
	
	public ParserRule getPrefixRule() {
		return getPrefixAccess().getRule();
	}

	//NamespaceObject:
	//	"NamespaceObject" {NamespaceObject};
	public NamespaceObjectElements getNamespaceObjectAccess() {
		return (pNamespaceObject != null) ? pNamespaceObject : (pNamespaceObject = new NamespaceObjectElements());
	}
	
	public ParserRule getNamespaceObjectRule() {
		return getNamespaceObjectAccess().getRule();
	}

	//// Interface rules
	//
	//Interface:
	//	("[" extendedAttributes+=InterfaceExtendedAttribute ("," extendedAttribute+=InterfaceExtendedAttribute)* "]")?
	//	"interface" name=ID ((":" superType+=[Interface|ScopedName]) ("," superType+=[Interface|ScopedName])*)? ("{"
	//	members+=InterfaceMember* "}")? ";";
	public InterfaceElements getInterfaceAccess() {
		return (pInterface != null) ? pInterface : (pInterface = new InterfaceElements());
	}
	
	public ParserRule getInterfaceRule() {
		return getInterfaceAccess().getRule();
	}

	//InterfaceExtendedAttribute:
	//	Callback | Constructor | NamedConstructor | NoInterfaceObject | PrototypeRoot | Supplemental | OverrideBuiltins |
	//	ReplaceableNamedProperties;
	public InterfaceExtendedAttributeElements getInterfaceExtendedAttributeAccess() {
		return (pInterfaceExtendedAttribute != null) ? pInterfaceExtendedAttribute : (pInterfaceExtendedAttribute = new InterfaceExtendedAttributeElements());
	}
	
	public ParserRule getInterfaceExtendedAttributeRule() {
		return getInterfaceExtendedAttributeAccess().getRule();
	}

	//InterfaceMember:
	//	Const | InterfaceFeature;
	public InterfaceMemberElements getInterfaceMemberAccess() {
		return (pInterfaceMember != null) ? pInterfaceMember : (pInterfaceMember = new InterfaceMemberElements());
	}
	
	public ParserRule getInterfaceMemberRule() {
		return getInterfaceMemberAccess().getRule();
	}

	//InterfaceFeature:
	//	Attribute | Operation;
	public InterfaceFeatureElements getInterfaceFeatureAccess() {
		return (pInterfaceFeature != null) ? pInterfaceFeature : (pInterfaceFeature = new InterfaceFeatureElements());
	}
	
	public ParserRule getInterfaceFeatureRule() {
		return getInterfaceFeatureAccess().getRule();
	}

	//// Operation rules 
	//
	//Operation:
	//	("[" extendedAttributes+=OperationExtendedAttribute ("," extendedAttributes+=OperationExtendedAttribute)* "]")?
	//	stringifier?="stringifier"? omittable?="omittable"? specials+=OperationSpecial* return=TypeRef name=ID? "("
	//	(arguments+=Argument ("," arguments+=Argument)*)? ")" ("raises" "(" raises+=[Exception|ScopedName] (","
	//	raises+=[Exception|ScopedName])* ")")? ";";
	public OperationElements getOperationAccess() {
		return (pOperation != null) ? pOperation : (pOperation = new OperationElements());
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}

	//OperationExtendedAttribute:
	//	TreatNullAs | TreatUndefinedAs;
	public OperationExtendedAttributeElements getOperationExtendedAttributeAccess() {
		return (pOperationExtendedAttribute != null) ? pOperationExtendedAttribute : (pOperationExtendedAttribute = new OperationExtendedAttributeElements());
	}
	
	public ParserRule getOperationExtendedAttributeRule() {
		return getOperationExtendedAttributeAccess().getRule();
	}

	//OperationSpecial:
	//	{OperationSpecialGetter} "getter" | {OperationSpecialSetter} "setter" | {OperationSpecialCreator} "creator" |
	//	{OperationSpecialDeleter} "deleter" | {OperationSpecialCaller} "caller";
	public OperationSpecialElements getOperationSpecialAccess() {
		return (pOperationSpecial != null) ? pOperationSpecial : (pOperationSpecial = new OperationSpecialElements());
	}
	
	public ParserRule getOperationSpecialRule() {
		return getOperationSpecialAccess().getRule();
	}

	//// Attribute
	//
	//Attribute:
	//	("[" extendedAttributes+=AttributeExtendedAttribute ("," extendedAttributes+=AttributeExtendedAttribute)* "]")?
	//	stringifier?="stringifier"? "readonly"? "attribute" type=TypeRef name=ScopedName (("getraises" "("
	//	getRaises+=[Exception|ScopedName] ("," getRaises+=[Exception|ScopedName])* ")")? ("setraises" "("
	//	setRaises+=[Exception|ScopedName] ("," setRaises+=[Exception|ScopedName])* ")")?) ";";
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//AttributeExtendedAttribute:
	//	PutForwards | Replaceable | TreatNullAs | TreatUndefinedAs;
	public AttributeExtendedAttributeElements getAttributeExtendedAttributeAccess() {
		return (pAttributeExtendedAttribute != null) ? pAttributeExtendedAttribute : (pAttributeExtendedAttribute = new AttributeExtendedAttributeElements());
	}
	
	public ParserRule getAttributeExtendedAttributeRule() {
		return getAttributeExtendedAttributeAccess().getRule();
	}

	//// Exception rules
	//
	//Exception:
	//	("[" extendedAttributes+=ExceptionExtendedAttribute ("," extendedAttributes+=ExceptionExtendedAttribute)* "]")?
	//	"exception" name=ID "{" members+=ExceptionMember* "}" ";";
	public ExceptionElements getExceptionAccess() {
		return (pException != null) ? pException : (pException = new ExceptionElements());
	}
	
	public ParserRule getExceptionRule() {
		return getExceptionAccess().getRule();
	}

	//ExceptionMember:
	//	Const | ExceptionField;
	public ExceptionMemberElements getExceptionMemberAccess() {
		return (pExceptionMember != null) ? pExceptionMember : (pExceptionMember = new ExceptionMemberElements());
	}
	
	public ParserRule getExceptionMemberRule() {
		return getExceptionMemberAccess().getRule();
	}

	//ExceptionField:
	//	type=TypeRef name=ID ";";
	public ExceptionFieldElements getExceptionFieldAccess() {
		return (pExceptionField != null) ? pExceptionField : (pExceptionField = new ExceptionFieldElements());
	}
	
	public ParserRule getExceptionFieldRule() {
		return getExceptionFieldAccess().getRule();
	}

	//ExceptionExtendedAttribute:
	//	NoInterfaceObject;
	public ExceptionExtendedAttributeElements getExceptionExtendedAttributeAccess() {
		return (pExceptionExtendedAttribute != null) ? pExceptionExtendedAttribute : (pExceptionExtendedAttribute = new ExceptionExtendedAttributeElements());
	}
	
	public ParserRule getExceptionExtendedAttributeRule() {
		return getExceptionExtendedAttributeAccess().getRule();
	}

	//// Argument rules
	//
	//Argument:
	//	("[" extendedAttributes+=ArgumentExtendedAttribute ("," extendedAttributes+=ArgumentExtendedAttribute)* "]")?
	//	in?="in"? optional?="optional"? type=TypeRef ellipsis?="..."? name=ID;
	public ArgumentElements getArgumentAccess() {
		return (pArgument != null) ? pArgument : (pArgument = new ArgumentElements());
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}

	//ArgumentExtendedAttribute:
	//	AllowAny | TreatNullAs | TreatUndefinedAs;
	public ArgumentExtendedAttributeElements getArgumentExtendedAttributeAccess() {
		return (pArgumentExtendedAttribute != null) ? pArgumentExtendedAttribute : (pArgumentExtendedAttribute = new ArgumentExtendedAttributeElements());
	}
	
	public ParserRule getArgumentExtendedAttributeRule() {
		return getArgumentExtendedAttributeAccess().getRule();
	}

	//// Const rules
	//
	//Const:
	//	"const" type=TypeRef name+=ID "=" expr=ConstExpr ";";
	public ConstElements getConstAccess() {
		return (pConst != null) ? pConst : (pConst = new ConstElements());
	}
	
	public ParserRule getConstRule() {
		return getConstAccess().getRule();
	}

	//ConstExpr:
	//	{ConstExpr} STRING | {ConstExpr} "0x"? INT;
	public ConstExprElements getConstExprAccess() {
		return (pConstExpr != null) ? pConstExpr : (pConstExpr = new ConstExprElements());
	}
	
	public ParserRule getConstExprRule() {
		return getConstExprAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
